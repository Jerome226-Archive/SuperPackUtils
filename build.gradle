buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        maven { url = 'https://repo.spongepowered.org/maven/'}
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'maven'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

version = "${mc_version}-${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_id}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "official", version: "${mc_version}".toString()
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=" + "${mod_id}".toString() + ".mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                superpackutils {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=" + "${mod_id}".toString() + ".mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                superpackutils {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=" + "${mod_id}".toString() + ".mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', archivesBaseName, '--all',
                    '--existing', file('src/main/resources').toString(),
                    '--existing', file('src/generated/resources').toString(),
                    '--output', file('src/generated/resources/')

            mods {
                superpackutils {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        // TOP
        name 'tterrag maven'
        url = "https://maven.tterrag.com/"
    }

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }

    maven { url 'https://modmaven.dev/' }

    maven { url = 'https://libraries.minecraft.net/' }
    mavenCentral()
    maven { url = 'https://maven.minecraftforge.net/' }

    flatDir name: 'lib', dirs: 'libs'
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_forge}"

    annotationProcessor "org.spongepowered:mixin:0.8.2:processor"

    runtimeOnly fg.deobf(project.dependencies.create("mcjty.theoneprobe:TheOneProbe-${top_version}") {
        transitive = false
    })

    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:${jei_version}")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-4.0.5.2")

    compileOnly "mekanism:Mekanism:${mekanism_version}:api"
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")

    implementation fg.deobf("JeromeIsAWeeb:eidolon:${eidelon_version}")

    compile fg.deobf("team.chisel.ctm:CTM:MC1.16.1-1.1.2.6")
}

jar {
    manifest {
        attributes(
                [
                "Specification-Title": "${mod_name}",
                "Specification-Vendor": "${mod_author}",
                "Specification-Version": "${version}", // We are version 1 of ourselves
                "Implementation-Title": "${mod_name}",
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"${mod_author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${mod_id}.mixins.json"
                ],
        )
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

tasks.build.dependsOn sourcesJar

jar.finalizedBy('reobfJar')

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

publishing {
    repositories {
        maven {
            name = "MinemobsMaven"
            url = "${mvn_url}"
            credentials {
                username = "${mvn_alias}"
                password = "${mvn_token}"
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact deobfJar
        }
    }
}